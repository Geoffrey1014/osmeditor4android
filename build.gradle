// Top-level build file where you can add
// configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        maven{url 'https://maven.aliyun.com/repository/jcenter'}
        maven{url 'https://maven.aliyun.com/repository/google'}
        maven{url 'https://maven.aliyun.com/repository/public'}
        maven{url 'https://maven.aliyun.com/repository/central'}
        mavenCentral()
		maven { url 'https://dl.bintray.com/content/simonpoole/div' }
		maven { url 'https://dl.bintray.com/content/simonpoole/osm' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
//		classpath 'org.kordamp:markdown-gradle-plugin:1.3.0'
        classpath 'ch.poole.gradle:markdown-gradle-plugin:0.2.3'
		classpath 'org.jacoco:org.jacoco.core:0.7.9'
        // classpath 'com.trickyandroid:jacoco-everywhere:0.2.1'
//        classpath "ch.poole:preset-utils:0.1.2"
        classpath "ch.poole:preset-utils:0.24.0"
    }
}

plugins {
	id "de.undercouch.download" version "3.1.1"
	id "org.sonarqube" version "2.6.1"
}
import de.undercouch.gradle.tasks.download.Download

allprojects {
	repositories {
        maven{url 'https://maven.aliyun.com/repository/jcenter'}
        maven{url 'https://maven.aliyun.com/repository/google'}
        maven{url 'https://maven.aliyun.com/repository/public'}
        maven{url 'https://maven.aliyun.com/repository/central'}
		mavenCentral()
		jcenter()
		maven { url 'https://dl.bintray.com/content/simonpoole/div' }
		maven { url 'https://dl.bintray.com/content/simonpoole/android' }
//		flatDir {
//        	dirs 'lib'
//    	}
	}
}

// Project level build file starts here
apply plugin: 'eclipse'
apply plugin: 'com.android.application'
//apply plugin: 'org.kordamp.gradle.markdown'
apply plugin:'ch.poole.gradle.markdown'
apply plugin: 'jacoco'
// apply plugin: 'jacoco-everywhere'

// note this is currently processed by a slightly modified version of the 
// org.kordamp.gradle.markdown plugin with support for a html template and 
// not the original
markdownToHtml.sourceDir  new File(projectDir.getPath() + '/documentation/docs/help')
markdownToHtml.inputEncoding "utf8"
markdownToHtml.outputDir  new File(projectDir.getPath() + '/src/main/assets/help')
markdownToHtml.outputEncoding "utf8"

task downloadPresetIconsZipFile(type: Download) {
	doFirst {
		delete projectDir.getPath() + '/src/main/assets/images/icons/png'
	}
	acceptAnyCertificate true
    src 'https://raw.githubusercontent.com/simonpoole/beautified-JOSM-preset/master/gen/vespucci_icons.zip'
    dest new File(projectDir.getPath() + '/src/main/assets/images/icons/png', 'vespucci_icons.zip')
}

task downloadPresetFile(type: Download) {
	acceptAnyCertificate true
    src 'https://raw.githubusercontent.com/simonpoole/beautified-JOSM-preset/master/gen/vespucci_preset_build.xml'
    dest new File(projectDir.getPath() + '/src/main/assets/preset.xml')
}

task updatePreset(dependsOn: ["downloadPresetFile", "downloadPresetIconsZipFile"], type: Copy) {
    from zipTree(downloadPresetIconsZipFile.dest)
	into projectDir.getPath() + '/src/main/assets/images/icons/png'
	doLast {
		delete downloadPresetIconsZipFile.dest
	}
}
updatePreset.group = 'vespucci'
updatePreset.description = 'Update the default preset from http://simonpoole.github.io/beautified-JOSM-preset/'

task updateImagery(type: Download) {
	acceptAnyCertificate true
    src 'https://raw.githubusercontent.com/simonpoole/osm-layer-index/gh-pages/imagery_tms_minified.json'
    dest new File(projectDir.getPath() + '/src/main/assets/imagery.json')
}
updateImagery.group = 'vespucci'
updateImagery.description = 'Update the background layer configuration from https://osmlab.github.io/editor-layer-index/'

task updateTaginfoJson(type: Exec) {
	def adb = android.getAdbExe().toString()
	commandLine adb, 'pull', 'sdcard/Vespucci/taginfo.json', projectDir.getPath()
}
updateTaginfoJson.group = 'vespucci'
updateTaginfoJson.description = 'Update the taginfo.json file from test device'

task update3rdPartyDocs(type: Download) {	
	acceptAnyCertificate true
    src 'https://raw.githubusercontent.com/simonpoole/OpeningHoursFragment/master/lib/documentation/docs/help/en/Opening%20hours.md'
    dest new File(projectDir.getPath() + '/documentation/docs/help/en/Opening hours.md')
}
update3rdPartyDocs.group = 'vespucci'
update3rdPartyDocs.description = 'Update markdown help files for 3rd party libraries'

task updateTranslations(type: Exec) {
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    	commandLine 'cmd', '/c', 'tx.exe', 'pull', '-a'
	} else {
    	commandLine 'tx', 'pull', '-a'
	}
}
updateTranslations.group = 'vespucci'
updateTranslations.description = 'Update translations by executing the transifex tx utility'

task updateSynonyms() {
}
updateSynonyms.group = 'vespucci'
updateSynonyms.description = 'Update synonym files from iD editor repo'

['af','ar','ast','bg','bs','ca','cs','da','de','dv','el','en-GB','en','eo','es','et','eu',
 'fa','fi','fr','gan','gl','gu','he','hi','hr','hu','hy','ia','id','is','it','ja','jv',
 'km','kn','ko','ku','lij','lt','lv','mg','mk','ml','mn','ms','ne','nl','nn','no','nv',
 'pl','pt-BR','pt','rm','ro','ru','sc','si','sk','sl','sq','sr','sv','ta','te','th','tl',
 'tr','uk','ur','vi','yue','zh-CN','zh-HK','zh-TW','zh'].each { lang ->
    def name="updateSynonyms${lang.capitalize()}"
	task (name,type: JavaExec) {
   	   main = "ch.poole.osm.presetutils.Synonyms"
       classpath = buildscript.configurations.classpath
       args('-l',    "$lang",
    	    '-x',    "military",
    	    '-o',    "src/main/assets/synonyms/synonyms.$lang")
   }
   updateSynonyms.dependsOn name
}

afterEvaluate{ // this task needs to be created after the uninstall tasks 
	task runSingleConnectedTest(dependsOn: ["installDebug","installDebugAndroidTest"], type: Exec) {
		def toRun = "de.blau.android.osm.ApiTest#dataDownloadElementTimeout"
		def adb = android.getAdbExe().toString()
		// commandLine adb, 'shell', 'pm', 'list', 'instrumentation'
		commandLine adb, 'shell', 'am', 'instrument', '-w', '-e', 'class',  toRun, 'de.blau.android.test/android.support.test.runner.AndroidJUnitRunner'
		finalizedBy uninstallDebugAndroidTest,uninstallDebug
	} 
	runSingleConnectedTest.group = 'vespucci'
	runSingleConnectedTest.description = 'Run a single test method on device (configuration needs to be edited)'
	
	// while we are at it make sure we remove any existing installation before we run the tests
	connectedDebugAndroidTest.dependsOn uninstallDebug
}

apply from: 'https://raw.githubusercontent.com/simonpoole/gradle-tasks/master/eclipse-android'

sonarqube {
    properties {
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.java.binaries", "build/intermediates/classes/debug"
        property "sonar.jacoco.reportPaths","build/outputs/code-coverage/connected/5n(AVD) - 7.0-coverage.ec,\
         build/outputs/code-coverage/connected/emulator-5554 - 7.0-coverage.ec, build/jacoco/testDebugUnitTest.exec,\
         build/outputs/code-coverage/connected/tablettwide(AVD) - 7.0-coverage.ec"
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.3"
 
    defaultConfig {
        minSdkVersion project.getMinSdkVersion()
        targetSdkVersion project.getTargetSdkVersion()
        versionCode project.getVersionCode()
        versionName "${project.getVersionName()}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

   buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
        	// currently there are too many un-investigated warnings to actually turn this on
        	// minifyEnabled true
            // proguardFiles getDefaultProguardFile('proguard-android.txt'),
            //        'proguard-rules.pro'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    
    testOptions {
        unitTests.all {
        	jacoco {
                includeNoLocationClasses = true
            }
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    } 
    
    lintOptions {
        // checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    
    dexOptions {
        jumboMode = true
    }
}

android.applicationVariants.all { variant ->
  task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
    description "Generates Javadoc for $variant.name."
    group "Documentation"
    source = variant.javaCompile.source
    classpath = files(variant.javaCompile.classpath.files) + files(android.bootClasspath) + files(variant.javaCompile.destinationDir)
    options.links("http://docs.oracle.com/javase/7/docs/api/");
    options.links("http://d.android.com/reference/");
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
  }
}

ext {
    okHttpVersion = "3.9.1"
    signpostVersion = "1.2.1.2"
    supportLibVersion = "24.1.1" // Note: this is the last version that supports API 8 / Android 2.2
}

dependencies {
    compile "ch.acra:acra:4.9.2"
    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support:recyclerview-v7:$supportLibVersion"
    compile "com.android.support:preference-v7:$supportLibVersion"
    compile "com.android.support:design:$supportLibVersion"
 	compile "com.android.support:support-annotations:24.2.0" 
    compile "com.nononsenseapps:filepicker:3.0.0"
    compile "oauth.signpost:signpost-core:$signpostVersion"
    compile "cz.msebera.android:httpclient:4.4.1.2"
    compile "com.squareup.okhttp3:okhttp:$okHttpVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    compile "com.adobe.xmp:xmpcore:5.1.3"
    compile "com.drewnoakes:metadata-extractor:2.10.1"
    compile "ch.poole:PoParser:0.7.2"
    compile "ch.poole:OpeningHoursParser:0.11.0"
    compile "ch.poole:ConditionalRestrictionParser:0.1.12"
    compile "ch.poole:OpeningHoursFragment:0.3.0"
    compile "com.google.code.gson:gson:2.8.1"
    compile 'com.faendir.rhino:rhino-android:1.4'
    compile 'ch.poole.android:numberpicker:1.0.8'
    compile 'ch.poole.android:numberpickerpreference:1.0.1'
    // for temp stuff during dev compile(name:'library-release', ext:'aar')
 
    // Unit tests
    testCompile "junit:junit:4.12"

    // Instrumentation tests
    androidTestCompile "com.android.support:support-annotations:24.2.0"
    androidTestCompile "com.android.support.test:runner:0.5"
    androidTestCompile "com.android.support.test:rules:0.5"
    androidTestCompile "org.hamcrest:hamcrest-library:1.3"
    androidTestCompile "com.android.support.test.espresso:espresso-core:2.2.2"
    androidTestCompile "com.squareup.okhttp3:mockwebserver:$okHttpVersion"
    androidTestCompile "pl.droidsonroids.yaml:snakeyaml:1.18.2" 
    androidTestCompile ("com.orhanobut:mockwebserverplus:1.0.0") {
    	exclude group: 'org.yaml', module: 'snakeyaml'
    }
    androidTestCompile "com.android.support.test.uiautomator:uiautomator-v18:2.1.2"
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
}


int getMinSdkVersion() {
    def xml = getXmlFromFile("${android.sourceSets.main.manifest.srcFile}")
    return xml.'uses-sdk'.@'android:minSdkVersion'.toInteger()
}

int getTargetSdkVersion() {
    def xml = getXmlFromFile("${android.sourceSets.main.manifest.srcFile}")
    return xml.'uses-sdk'.@'android:targetSdkVersion'.toInteger()
}

int getVersionCode() {
    def xml = getXmlFromFile("${android.sourceSets.main.manifest.srcFile}")
    return xml.@'android:versionCode'.toInteger()
}

String getVersionName() {
    def xml = getXmlFromFile("${android.sourceSets.main.res.srcDirs[0]}/values/appname.xml")
    def versionName = xml.string.find { it.@name == 'app_version' }.toString()
    if (versionName == null || versionName.length() == 0) {
        throw new NullPointerException("Failure extracting version name.")
    }
    return versionName
}

def getXmlFromFile(String xmlFilePath) {
    def xml = new XmlSlurper().parse(new File(xmlFilePath))
    if (xml == null) {
        throw new NullPointerException("Failure reading from " + xmlFilePath)
    }
    return xml;
}

def coverageSourceDirs = [
        'src/main/java'
]

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Verification"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}
